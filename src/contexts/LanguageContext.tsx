import React, { createContext, useContext, useState, ReactNode } from 'react';

interface LanguageContextType {
  language: string;
  setLanguage: (lang: string) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

const translations = {
  en: {
    // Navbar
    home: "Home",
    about: "About",
    features: "Features",
    dashboard: "Dashboard",
    getStarted: "Get Started",
    
    // Hero
    smartAgriculture: "Smart Agriculture Protection",
    annapurnaShield: "Annapurna Shield",
    protectingCrops: "Protecting Your",
    cropsWithAI: "Crops with AI",
    grainProtection: "üåæ Grain Protection",
    aiTechnology: "ü§ñ AI Technology",
    heroDescription: "Advanced IoT sensors and machine learning for soil monitoring, crop disease prediction, and agricultural yield optimization with real-time insights for Indian farmers.",
    startMonitoring: "Start Monitoring",
    learnMore: "Learn More",
    monitoring: "Monitoring",
    accuracy: "Accuracy",
    costSavings: "Cost Savings",
    soilHealth: "Soil Health: Excellent",
    predictedPrice: "Predicted Price/ton",
    
    // Dashboard
    farmerDashboard: "Farmer Dashboard",
    hardwareConnection: "Hardware Connection",
    selectYourCrop: "Select Your Crop",
    currentSuggestions: "Current Protection Suggestions",
    weeklySuggestions: "Next 7 Days Suggestions",
    currentYield: "Current Yield (kg/acre)",
    locationServices: "Location Services",
    priceAnalysis: "Price Analysis & Predictions",
    wasteManagement: "Waste Management Solutions",
    microLoanAssistance: "Micro Loan Assistance",
    sendMessage: "Send Message",
    callExpert: "Call for Expert Advice",
    
    // Problem Statement
    problemsInAgriculture: "Problems in Indian Agriculture",
    coreIssue: "Core Issue",
    rootCause: "Root Cause",
    currentMethodFailure: "Current Method Failure",
    wasteInefficiency: "Waste Inefficiency",
    needForSolution: "Need for Solution",
    
    // Solution
    ourSolution: "Our Solution",
    theConcept: "The Concept",
    dualGoal: "The Dual Goal",
    theImpact: "The Impact",
    aiIntelligence: "AI-Powered Intelligence",
    smartSolutions: "Smart Solutions for Farmers",
    
    // Features
    comprehensiveTitle: "Comprehensive Agricultural Solutions",
    comprehensiveDesc: "From soil monitoring to financial assistance, Annapurna Shield provides everything you need for successful modern farming.",
    soilTemperature: "Soil Temperature Monitoring",
    humidityAnalysis: "Humidity Analysis",
    pricePrediction: "Price Prediction",
    wasteManagementFeature: "Waste Management",
    microLoanFeature: "Micro Loan Assistance",
    expertConsultation: "Expert Consultation",
    
    // About
    aboutTitle: "About Annapurna Shield",
    aboutDescription: "Our mission is to revolutionize agriculture through technology, helping farmers make informed decisions and achieve sustainable, profitable farming practices.",
    cropProtection: "Crop Protection",
    mlPredictions: "ML Predictions",
    iotMonitoring: "IoT Monitoring",
    yieldOptimization: "Yield Optimization",
    empoweringFarmers: "Empowering Farmers with Smart Technology",
    realTimeMonitoring: "Real-time soil monitoring",
    aiRecommendations: "AI-powered crop recommendations",
    priceInsights: "Price prediction and market insights",
    wasteSolutions: "Waste management solutions",
    
    // Footer
    footerDescription: "Empowering Indian farmers with smart technology for better crop management, waste reduction, and increased profitability through AI-powered solutions.",
    quickLinks: "Quick Links",
    contactUs: "Contact Us",
    addressIndia: "New Delhi, India",
    allRightsReserved: "All rights reserved",
  },
  hi: {
    // Navbar
    home: "‡§π‡•ã‡§Æ",
    about: "‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
    features: "‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç",
    dashboard: "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
    getStarted: "‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
    
    // Hero
    smartAgriculture: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•É‡§∑‡§ø ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
    annapurnaShield: "‡§Ö‡§®‡•ç‡§®‡§™‡•Ç‡§∞‡•ç‡§£‡§æ ‡§∂‡•Ä‡§≤‡•ç‡§°",
    protectingCrops: "‡§Ü‡§™‡§ï‡•Ä ‡§´‡§∏‡§≤‡•ã‡§Ç ‡§ï‡•Ä",
    cropsWithAI: "AI ‡§∏‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
    grainProtection: "üåæ ‡§Ö‡§®‡•ç‡§® ‡§∏‡§Ç‡§∞‡§ï‡•ç‡§∑‡§£",
    aiTechnology: "ü§ñ AI ‡§§‡§ï‡§®‡•Ä‡§ï",
    heroDescription: "‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è IoT ‡§∏‡•á‡§Ç‡§∏‡§∞ ‡§î‡§∞ ‡§Æ‡§∂‡•Ä‡§® ‡§≤‡§∞‡•ç‡§®‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä, ‡§´‡§∏‡§≤ ‡§∞‡•ã‡§ó ‡§ï‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§î‡§∞ ‡§ï‡•É‡§∑‡§ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®‡•§",
    startMonitoring: "‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
    learnMore: "‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç",
    monitoring: "‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä",
    accuracy: "‡§∏‡§ü‡•Ä‡§ï‡§§‡§æ",
    costSavings: "‡§≤‡§æ‡§ó‡§§ ‡§¨‡§ö‡§§",
    soilHealth: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø: ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü",
    predictedPrice: "‡§™‡•ç‡§∞‡§§‡§ø ‡§ü‡§® ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä",
    
    // Dashboard
    farmerDashboard: "‡§ï‡§ø‡§∏‡§æ‡§® ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
    hardwareConnection: "‡§π‡§æ‡§∞‡•ç‡§°‡§µ‡•á‡§Ø‡§∞ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§®",
    selectYourCrop: "‡§Ö‡§™‡§®‡•Ä ‡§´‡§∏‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç",
    currentSuggestions: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ",
    weeklySuggestions: "‡§Ö‡§ó‡§≤‡•á 7 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§ï‡•á ‡§∏‡•Å‡§ù‡§æ‡§µ",
    currentYield: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® (‡§ï‡§ø‡§≤‡•ã/‡§è‡§ï‡§°‡§º)",
    locationServices: "‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç",
    priceAnalysis: "‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§î‡§∞ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä",
    wasteManagement: "‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
    microLoanAssistance: "‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã ‡§≤‡•ã‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ",
    sendMessage: "‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç",
    callExpert: "‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç",
    
    // Problem Statement
    problemsInAgriculture: "‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡•É‡§∑‡§ø ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç",
    coreIssue: "‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ",
    rootCause: "‡§Æ‡•Ç‡§≤ ‡§ï‡§æ‡§∞‡§£",
    currentMethodFailure: "‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§™‡§¶‡•ç‡§ß‡§§‡§ø ‡§ï‡•Ä ‡§µ‡§ø‡§´‡§≤‡§§‡§æ",
    wasteInefficiency: "‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§Ö‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ",
    needForSolution: "‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ",
    
    // Solution
    ourSolution: "‡§π‡§Æ‡§æ‡§∞‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
    theConcept: "‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ",
    dualGoal: "‡§¶‡•ã‡§π‡§∞‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø",
    theImpact: "‡§™‡•ç‡§∞‡§≠‡§æ‡§µ",
    aiIntelligence: "AI ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§§‡•ç‡§§‡§æ",
    smartSolutions: "‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
    
    // Features
    comprehensiveTitle: "‡§µ‡•ç‡§Ø‡§æ‡§™‡§ï ‡§ï‡•É‡§∑‡§ø ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
    comprehensiveDesc: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§∏‡•á ‡§≤‡•á‡§ï‡§∞ ‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§§‡§ï, ‡§Ö‡§®‡•ç‡§®‡§™‡•Ç‡§∞‡•ç‡§£‡§æ ‡§∂‡•Ä‡§≤‡•ç‡§° ‡§∏‡§´‡§≤ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§ï‡•É‡§∑‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§",
    soilTemperature: "‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§§‡§æ‡§™‡§Æ‡§æ‡§® ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä",
    humidityAnalysis: "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
    pricePrediction: "‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä",
    wasteManagementFeature: "‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®",
    microLoanFeature: "‡§Æ‡§æ‡§á‡§ï‡•ç‡§∞‡•ã ‡§≤‡•ã‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ",
    expertConsultation: "‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂",
    
    // About
    aboutTitle: "‡§Ö‡§®‡•ç‡§®‡§™‡•Ç‡§∞‡•ç‡§£‡§æ ‡§∂‡•Ä‡§≤‡•ç‡§° ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
    aboutDescription: "‡§π‡§Æ‡§æ‡§∞‡§æ ‡§Æ‡§ø‡§∂‡§® ‡§™‡•ç‡§∞‡•å‡§¶‡•ç‡§Ø‡•ã‡§ó‡§ø‡§ï‡•Ä ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§ï‡•É‡§∑‡§ø ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§∞‡§æ‡§Ç‡§§‡§ø ‡§≤‡§æ‡§®‡§æ ‡§π‡•à, ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§≤‡•á‡§®‡•á ‡§î‡§∞ ‡§ü‡§ø‡§ï‡§æ‡§ä, ‡§≤‡§æ‡§≠‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•É‡§∑‡§ø ‡§™‡•ç‡§∞‡§•‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ‡•§",
    cropProtection: "‡§´‡§∏‡§≤ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
    mlPredictions: "ML ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡§ø‡§Ø‡§æ‡§Ç",
    iotMonitoring: "IoT ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä",
    yieldOptimization: "‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®",
    empoweringFarmers: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§§‡§ï‡§®‡•Ä‡§ï ‡§∏‡•á ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§®‡§æ",
    realTimeMonitoring: "‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä",
    aiRecommendations: "AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§´‡§∏‡§≤ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç",
    priceInsights: "‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§î‡§∞ ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§¶‡•É‡§∑‡•ç‡§ü‡§ø",
    wasteSolutions: "‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
    
    // Footer
    footerDescription: "AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§´‡§∏‡§≤ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§®, ‡§Ö‡§™‡§∂‡§ø‡§∑‡•ç‡§ü ‡§ï‡§Æ‡•Ä ‡§î‡§∞ ‡§¨‡§¢‡§º‡•Ä ‡§π‡•Å‡§à ‡§≤‡§æ‡§≠‡§™‡•ç‡§∞‡§¶‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§§‡§ï‡§®‡•Ä‡§ï ‡§∏‡•á ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§®‡§æ‡•§",
    quickLinks: "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§≤‡§ø‡§Ç‡§ï",
    contactUs: "‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç",
    addressIndia: "‡§®‡§à ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä, ‡§≠‡§æ‡§∞‡§§",
    allRightsReserved: "‡§∏‡§≠‡•Ä ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§",
  }
};

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState('en');

  const t = (key: string): string => {
    return translations[language as keyof typeof translations]?.[key as keyof typeof translations.en] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
